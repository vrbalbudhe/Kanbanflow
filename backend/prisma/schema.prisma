// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  username  String   @unique
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // relations
  boards Board[]
}

enum BoardStatus {
  active
  pending
  completed
}

model Board {
  id           String        @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String
  owner        String
  status       BoardStatus
  Task         Task[]
  participants Participant[]
  columns      Column[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // relations
  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

enum PermissionType {
  viewer
  editor
}

enum UserType {
  admin
  worker
  guest
}

model Participant {
  id         String         @id @default(auto()) @map("_id") @db.ObjectId
  email      String
  permission PermissionType @default(viewer)
  userAccess UserType
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt

  // relations
  Board   Board?  @relation(fields: [boardId], references: [id])
  boardId String? @db.ObjectId

  @@unique([email, boardId])
}

enum Priority {
  low
  medium
  high
}

model Tag {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  title  String
  src    String?
  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String? @db.ObjectId
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  tags        Tag[]
  priority    Priority
  assigneeId  String?
  chats       Chat[]

  board    Board   @relation(fields: [boardId], references: [id])
  boardId  String  @db.ObjectId
  column   Column? @relation(fields: [columnId], references: [id])
  columnId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Column {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  colorCode String
  orderId   String
  order     Int      @default(1)
  Task      Task[]
  Board     Board?   @relation(fields: [boardId], references: [id])
  boardId   String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Chat {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String
  senderId  String
  createdAt DateTime @default(now())

  // relations
  Task   Task?   @relation(fields: [taskId], references: [id])
  taskId String? @db.ObjectId
}
